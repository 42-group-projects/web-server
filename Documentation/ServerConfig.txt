   _____                           _____             __ _          _____ _               
  ╱ ____│                         ╱ ____│           ╱ _(_)        ╱ ____│ │              
 │ (___   ___ _ ____   _____ _ __│ │     ___  _ __ │ │_ _  __ _  │ │    │ │ __ _ ___ ___ 
  ╲___ ╲ ╱ _ ╲ '__╲ ╲ ╱ ╱ _ ╲ '__│ │    ╱ _ ╲│ '_ ╲│  _│ │╱ _` │ │ │    │ │╱ _` ╱ __╱ __│
  ____) │  __╱ │   ╲ V ╱  __╱ │  │ │___│ (_) │ │ │ │ │ │ │ (_│ │ │ │____│ │ (_│ ╲__ ╲__ ╲
 │_____╱ ╲___│_│    ╲_╱ ╲___│_│   ╲_____╲___╱│_│ │_│_│ │_│╲__, │  ╲_____│_│╲__,_│___╱___╱
                                                           __╱ │                         
                                                          │___╱                                           
---------------------------------------------------------------------------------------
SERVER CONFIG ACCESS

Use the ServerConfig class to retrieve server and location settings after parsing a .conf file.
Accessible in any file that includes "../include/globals.hpp"

Constructor
- ServerConfig()  
  Does nothing (happens on a global scope where argv is out of reach)

Initializer
- initServerConfig(int argc, char *argv[]) 
  Loads the configuration file. If none is provided, uses ./configFiles/webserv.conf

---------------------------------------------------------------------------------------
GLOBAL CONFIG ACCESS:

- g_config.getRoot()  
  Returns the global server root path (std::string)

- g_config.getListen()  
  Returns vector<pair<string, int>> of IP:PORT bindings

- g_config.getErrorPages()  
  Returns map<int, string> of HTTP error codes to custom error page paths

- g_config.getClientMaxBodySize()  
  Returns max allowed request body size in bytes (size_t)

- g_config.getServerName()  
  Returns the server name (std::string)

---------------------------------------------------------------------------------------
LOCATION CONFIG ACCESS:

Use the `operator[]` of `ServerConfig` with the location path to access each field:

Example: g_config["/upload"].upload_enabled
Using this with a location path that isn't mentioned in the configuration file
will access location struct filled with default settings.

Fields in LocationConfig:

- g_config[locationPath].path                  : location path (std::string)
- g_config[locationPath].getAllowed            : GET allowed (bool)
- g_config[locationPath].postAllowed           : POST allowed (bool)
- g_config[locationPath].deleteAllowed         : DELETE allowed (bool)
- g_config[locationPath].root                  : location root path (std::string)
- g_config[locationPath].index                 : default index file (std::string)
- g_config[locationPath].autoindex             : directory listing enabled (bool)
- g_config[locationPath].redirect_enabled      : redirection enabled (bool)
- g_config[locationPath].redirect_url          : redirection target (std::string)
- g_config[locationPath].redirect_code         : HTTP status code for redirection (int)
- g_config[locationPath].upload_enabled        : uploads enabled (bool)
- g_config[locationPath].upload_store          : upload destination folder (std::string)
- g_config[locationPath].cgi_pass              : map of file extensions to CGI executables (std::map<std::string, std::string>)
